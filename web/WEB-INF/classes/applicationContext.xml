<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://java.sun.com/jsf/composite"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

    <!--扫描注解，use-default-filters默认为true，全部扫描-->
    <context:component-scan base-package="com.study" use-default-filters="true">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--导入数据库属性的配置文件，方法一-->
    <context:property-placeholder location="classpath:mysql.properties"/>

    <!--配置事务-->
    <!-- 声明使用注解式事务 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->

    <!--导入数据库属性的配置文件，方法二-->
    <!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
        <!--<property name="location" value="classpath:mysql.properties"/>-->
    <!--</bean>-->

    <!--spring自带的数据源链接，还有apache插件自带的dbcp和c3p0数据源的链接-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--指定mapper文件的存放位置,当mapper文件与mapper接口放在同一位置，则不需要指定-->
        <property name="mapperLocations" value="classpath*:mapper/*Mapper.xml"/>
    </bean>

    <!--&lt;!&ndash;dao层mapper接口开发方法&lt;!&ndash; DAO接口所在包名，Spring会自动查找其下的类 将mapper接口生成代理注入到spring中&ndash;&gt;&ndash
    如果使用此方法，不需要再mapper接口上使用注解@Repostory,但是必须要有此配置，因为使用spring的组件扫面，扫描不到mapper接口;&gt;-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.study.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--原始dao层开发方法，需要配置的,但是此配置也可以不写，因为在上面已经自动扫面-->
    <!--<bean id="memberDao" class="com.study.dao.MemberDaoImpl">-->
    <!--<property name="sqlSessionFactory" ref="sqlSessionFactory" />-->
    <!--</bean>-->


    <!--配置事务管理器,配置mybatis操作数据库的配置-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--事务配置-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--事务的传播行为-->
        <tx:attributes>
            <tx:method name="update" propagation="REQUIRED"/>
            <tx:method name="delete" propagation="REQUIRED"/>
            <tx:method name="insert" propagation="REQUIRED"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--&lt;!&ndash;配置aop&ndash;&gt;-->
    <!--<aop:config>-->
    <!--<aop:advisor pointcut="execution(* com.study.service.*Service*.*(..))"-->
    <!--advice-ref="txAdvice"/>-->
    <!--</aop:config>-->

    <!--&lt;!&ndash;另外一种配置事务通知的方法&ndash;&gt;-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->


    <!--<bean id="helloMybatis" class="entity.hello.HelloWorldMybatis"/>-->

    <!--<bean id="helloWorldSpring" class="entity.hello.HelloWorldSpring">-->
        <!--<property name="name" value="test"/>-->
        <!--<property name="age" value="25"/>-->
        <!--&lt;!&ndash;//必须存在set方法,或者是只带该属性做为参数的构造器&ndash;&gt;-->
        <!--<constructor-arg value="zsk"/>-->
        <!--<constructor-arg ref="helloMybatis"/>-->
        <!--<property name="names">-->
            <!--<list>-->
                <!--<value>szsk1</value>-->
                <!--<value>zsh2</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="sets">-->
            <!--<set>-->
                <!--<value>zsk3</value>-->
            <!--</set>-->
        <!--</property>-->
        <!--<property name="nameAge">-->
            <!--<map>-->
                <!--<entry key="keke" value="1"/>-->
                <!--<entry key="zsk" value="2"/>-->
            <!--</map>-->
        <!--</property>-->
        <!--<property name="nameGender">-->
            <!--<props>-->
                <!--<prop key="keke">keke</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->
</beans>